#ifndef MJJBATANALYSISFACILITY_H
#define MJJBATANALYSISFACILITY_H

/*!
 * \class MjjBATAnalysisFacility
 * \brief A class for producing pseudoexperiments for an MjjBATModel.
 * \author Katherine Pachal
 * \date 2013
 * 
 * Based on the class by Daniel Kollar and Kevin
 * Kroeninger. This is constructed from and MjjBATModel and
 * uses the data and processes defined there to produce
 * pseudoexperiments and marginalise them to calculate
 * CLs for limit setting. This class uses the MjjHistogram
 * format to allow treatment of weighted data.
 */

// ---------------------------------------------------------
#include <string>
#include <vector>

#include <sys/stat.h>
#include <unistd.h>
#include <iostream>

#include <TROOT.h>
#include <TCanvas.h>
#include <TTree.h>
#include <TH1D.h>
#include <TRandom3.h>
#include <TFile.h>

#include "BAT/BCLog.h"
#include "BAT/BCH1D.h"
#include "BAT/BCParameter.h"

#include "Bayesian/MjjBATModel.h"
#include "Bayesian/MjjBATSystematic.h"
#include "Bayesian/MjjBATComparisonTool.h"

// ---------------------------------------------------------
class MjjBATAnalysisFacility
{

   public:

      /** \name Constructors and destructors */
      /** @{ */

      /**
       * The default constructor. 
       * @param mtf The MTF object. */
      MjjBATAnalysisFacility(MjjBATModel * mtf, unsigned int seed=12340);

      /** 
       * The default destructor. */
      ~MjjBATAnalysisFacility();

      /** @} */
      /** \name Member functions (get) */
      /** @{ */

      /**
       * @return A pointer to the MTF object. */
      MjjBATModel * GetMjjBAT()
         { return fMBM; };

      /** @} */
      /** \name Member functions (set) */
      /** @{ */

      /**
       * Set the pointer to an MjjBATModel object.
       * @param mbm The MjjBATModel object. */
      void SetMjjBATModel(MjjBATModel * mbm)
         { fMBM = mbm; };

      /**
       * Set a flag for using MCMC (true) or not (false).
       * @param flag The flag. */
      void SetFlagMCMC(bool flag)
         { fFlagMCMC = flag; };

      /** @} */
      /** \name Member functions (miscellaneous methods) */
      /** @{ */

      /**
       * Get the log level for the ensemble test. 
       * @return The log level. */
      BCLog::LogLevel GetLogLevel()
         { return fLogLevel; };

      /**
       * Set the log level for the ensemble test. 
       * @param level The log level. */
      void SetLogLevel(BCLog::LogLevel level)
         { fLogLevel=level; };

      /**
       * Perform the analysis using one systematic at a time, without
       * systematic and with all systematics. The following options
       * are available: \n
       * "mcmc" : use mcmc. 
       * @param dirname The name of a directory into which the results are copied.
       * @param options A set of options.
       * @return An error code. */
      int PerformSingleSystematicAnalyses(std::string dirname, std::string options = "");

      /**
       * Perform the analysis on pseudo-data generated by varying one
       * of the parameters.
       * @param dirname The name of a directory into which the results are copied.
       * @param default_parameters The set of parameters which are fixed. 
       * @param index The index of the parameter which will be varied.
       * @param parametervalues The different values of the parameter which is varied.
       * @param nensembles The number of ensembles used in the test. 
       * @return An error code. */
      int PerformCalibrationAnalysis(std::string dirname, const std::vector<double> & default_parameters, int index, const std::vector<double> & parametervalues, int nensembles = 1000);

      /**
       * Build a single ensemble based on a single set of parameters.
       * @param parameters The set of parameters which are used to generate the ensembles.
       * @return A vector of TH1D histograms with the pseudo-data. */
      TH1D BuildEnsemble(const std::vector<double> & parameters);

      /**
       * Build ensembles based on a single set of parameters. 
       * @param parameters The set of parameters which are used to generate the ensembles.
       * @param nensembles The number of ensembles to be generated.
       * @return A tree containing the ensembles. */
      TTree * BuildEnsembles(const std::vector<double> & parameters, int nensembles);

      /**
       * Build ensembles based on a varying sets of parameters, e.g., using the prior or posterior.
       * @param tree A BAT output tree containing the parameters to be used for the generation of the ensembles.
       * @param nensembles The number of ensembles to be generated.
       * @return A tree containing the ensembles. */
      TTree * BuildEnsembles(TTree * tree, int nensembles);

      /**
       * Perform ensemble test based on one set of parameters.
       * @param parameters The set of parameters which are used to generate the ensembles.
       * @param nensembles The number of ensembles to be generated.
       * @return A tree containing the ensembles and the output of the test. */
      TTree * PerformEnsembleTest(const std::vector<double> & parameters, int nensembles, int firstBinToUse=-1, int lastBinToUse=-1);

      /**
       * Perform ensemble test based on varying sets of parameters.
       * @param tree A BAT output tree containing the parameters to be used for the generation of the ensembles.
       * @param nensembles The number of ensembles to be generated.
       * @param firstBinToUse First bin to include in limit-setting. Should match that in real data.
       * @param lastBinToUse Last bin to include in limit-setting. Should match that in real data.
       * @param start The first ensemble used in the tree. 
       * @return A tree containing the ensembles and the output of the test. */
      TTree * PerformEnsembleTest(TTree * tree, int nensembles, int firstBinToUse=-1, int lastBinToUse=-1, int start = 0);

      /**
       * Transform a matrix to a set of histograms.
       * @param matrix The matrix.
       * @return A vector of histograms. */
      TH1D MatrixToHistograms(std::vector<double> & matrix);

 private:

      /** 
       * The MjjBATModel object. */
      MjjBATModel * fMBM;

      /**
       * A random number generator. */
      TRandom3 * fRandom;

      /**
       * A flag defining the use of MCMC for the analyses. */
      bool fFlagMCMC;

      /**
       * The log level for the ensemble tests. */
      BCLog::LogLevel fLogLevel;

};
// ---------------------------------------------------------

#endif

